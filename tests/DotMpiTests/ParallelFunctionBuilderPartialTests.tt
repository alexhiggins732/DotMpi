<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Microsoft.VisualStudio.TestPlatform.CommunicationUtilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static DotMpi.Mpi;

namespace DotMpi.MpiTests
{

    public partial class ParallelFunctionBuilderTests
    {

    <#
	    for(var i=0; i<16;i++)
	    {#>

        public static string For(<#	for(var j=0; j<=i;j++){#>int arg<#=j#><#if(j<i){#>, <#}#><#}#>) 
            => $"Thread {arg0} - Cpu {Cpu} - Process {ProcessId}: {nameof(For)}";
    <#}#>

        <#
	    for(var i=0; i<16;i++)
	    {#>

        [TestMethod()]
        public void ParallelForTest_1_<#=i.ToString().PadLeft(2, '0')#>()
        {
            Func<<#	for(var j=0; j<=i;j++){#>int<#if(j<i){#>, <#}#><#}#>, string> target = For;

            var runner = Mpi
                .ParallelFor(0, numThreads, target, i => new(<#	for(var j=0; j<=i;j++){if(j==0){#>i<#}else{#>0<#}#><#if(j<i){#>, <#}#><#}#>))
                .Run().
                 Wait();

            for (var i = 0; i < numThreads; i++)
            {
                var result = runner.Results[i];
                Assert.IsTrue(result.StartsWith($"Thread {i}"), result);

            }
        }
        <#}#>

        <#
	    for(var i=0; i<16;i++)
	    {#>

        [TestMethod]
        public void ParallelForTest_2_<#=i.ToString().PadLeft(2, '0')#>()
        {
            Func<<#	for(var j=0; j<=i;j++){#>int<#if(j<i){#>, <#}#><#}#>, string> target = For;

            var func = Mpi
                .ParallelFor(0, numThreads, target, <#	for(var j=0; j<=i;j++){#><#=j#><#if(j<i){#>, <#}#><#}#>);
           
           func.FunctionResultReturned += (sender, e) =>
            {
                var thread = e.ThreadIndex;
                var result = e.Result;
                Assert.IsTrue(result != null);
                Assert.IsTrue(result.StartsWith($"Thread {thread}"), result);

                var args = e.ArgProvider.ToArray().Select(i => (int)i);
                var expectedArgs = new[] { <#	for(var j=0; j<=i;j++){#><#=j#><#if(j<i){#>, <#}#><#}#> };
                Assert.IsTrue(args.SequenceEqual(expectedArgs),
                    $"Args: {string.Join(", ", args)} Expected: {string.Join(", ", args)}"
                );

                var argList =(ArgList<<#	for(var j=0; j<=i;j++){#>int<#if(j<i){#>, <#}#><#}#>>)e.ArgProvider;
                object[] argListArray = argList;
                var argListTypedArray = argListArray.Select(x => (int)x);
                Assert.IsTrue(argListTypedArray.SequenceEqual(expectedArgs),
                    $"Args: {string.Join(", ", args)} Expected: {string.Join(", ", args)}"
                );

       

            };
            func.Run().
                 Wait();    

        }
        <#}#>

    }

}