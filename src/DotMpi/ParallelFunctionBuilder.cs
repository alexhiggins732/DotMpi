using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DotMpi
{
    public partial class Mpi
    {
        public partial class ParallelFunctionBuilder
        {

            //public int NumThreads { get; }

            /// <summary>
            /// The start index, inclusive.
            /// </summary>
            public int Start { get; }

            /// <summary>
            /// The end index, exclusive.
            /// </summary>
            public int End { get; }

            /// <summary>
            /// Multi processor interface parallel runner
            /// </summary>
            /// <param name="fromInclusive">The start index, inclusive.</param>
            /// <param name="toExclusive">The end index, exclusive.</param>
            /// <exception cref="ArgumentException"></exception>
            public ParallelFunctionBuilder(int fromInclusive, int toExclusive)
            {
                this.Start = fromInclusive;
                this.End = toExclusive;
            }

            /// <summary>
            /// Multi processor interface parallel runner
            /// </summary>
            /// <param name="numThreads">The number of processor threads to create.</param>
            /// <exception cref="ArgumentException"></exception>
            public ParallelFunctionBuilder(int numThreads)
                : this(0, numThreads) { }


    
            // additional generic overloads generated by ParallelRunner.tt template.


        }
    }
 
}
